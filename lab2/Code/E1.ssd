/* 检查错误类型1，变量未定义而使用 */
/* 检查错误类型3，变量出现重复定义 */
/* 检查错误类型5，赋值号两边的表达式类型不匹配 */
/* 检查错误类型10，对非数组类型变量使用数组访问操作符 */

Def -> Specifier DecList SEMI (34)
DecList.iType = Specifier.sType

Specifier -> TYPE (9)
Specifier.sType = TYPE.str

DecList -> Dec (35)
Dec.iType = Declist.iType

DecList -> Dec COMMA DecList' (36)
Dec.iType = DecList.iType
DecList'.iType = DecList.iType

Dec -> VarDec (37)
VarDec.iType = Dec.iType
VarDec.iDimension = 0
Dec.sLegalInType = true

Dec -> VarDec ASSIGNOP Exp (38)
VarDec.iType = Dec.iType
VarDec.iDimension = 0
Exp.iDimension = 0;
Dec.sLegalInType = VarDec.sType == Exp.sType && VarDec.sDimension = Exp.sDimension

VarDec -> ID (16)
VarDec.sType = VarDec.iType
VarDec.sDimension = VarDec.iDemension
ID.sType = VarDec.sType
ID.sDimension = VarDec.sDimension
checkIDNotExist(ID)
addSymbol(ID)

VarDec -> VarDec' LB INT RB (17)
VarDec'.iType = VarDec.iType
VarDec'.iDimension = VarDec.iDimension + 1
VarDec.sType = VarDec'.sType
VarDec.sDimension = VarDec'.sDimension

/* 例子 */
int a[2][3][4];
*Def
**Specifier
**DecList
***Dec
****VarDec(x[2][3][4])----------
*****VarDec(x[2][3])--------   |
******VarDec(x[2])------   |   |
*******VarDec          |   |   |
********ID(x)          |   |   |
******LB               |   |   |
******INT(2)           |   |   |
******RB----------------   |   |
*****LB                    |   |
*****INT(3)                |   |
*****RB---------------------   |
****LB                         |
****INT(4)                     |
****RB--------------------------
**SEMI
/* 可以按照这棵树手动走一遍求值过程 */

/* 查表部分 */
Stmt -> Exp SEMI (26)
Exp.iDimension = 0

/* 检查错误类型12，数组访问操作符中出现非整数 */
/* 方括号中出现表达式的产生式只有这一个，所以只要查这个产生式就能检测所有该类型错误 */
/* 检查Exp''是否是整数类型 */
/* 如果Exp''不是整数类型，报错后把Exp''看成整数类型，即错误不向上传递 */
/* 如果Exp''出现了其他错误，也是一样的，报错后不向上传递错误 */
/* 所以Exp.sValid = Exp'.sValid 而不是Exp'.sValid && Exp''.sValid*/
/* 测试如下：i[int]／i[float]／i[数组]／i[非法表达式] */
Exp -> Exp' LB Exp'' RB (52)
Exp'.iDimension = Exp.iDimension + 1
Exp''.iDimension = 0
if (!(Exp''.sType == "int" && Exp''.sDimension = 0)) error ...
Exp.sType = Exp'.sType
Exp.sDimenison = Exp'.sDimension
Exp.sVaild = Exp'.sValid

/* j; */

/* 检查错误类型1，变量未定义而使用 */
/* 所以有Id.ifExist，具体动作是道符号表里查是否已有该变量 */
/* int x[1][2]; */
/* x[1][2][3]; */
Exp -> ID (54)
Exp.sValid = Id.ifExist && Exp.iDimension <= ID.sDimension
Exp.sType = ID.sType
Exp.sDimension = Id.sDimension - Exp.iDimension

/* 1 */
Exp -> INT/FLOAT (55/56)
Exp.sValid = 1
Exp.sType = Int/Float.sType
Exp.sDimension = 0

/* 例子 */
x[1][2];
*Stmt
**Exp--------------
***Exp----------  |
****Exp        |  |
*****ID(x)     |  |
****LB         |  |
****Exp        |  |
*****INT(1)    |  |
****RB----------  |
***LB             |
***Exp            |
****INT(2)        |
***RB--------------
**SEMI
/* 可以按照这棵树手动走一遍求值过程 */

/* int i; */
/* j = i; */

/* int j; */
/* j = i; */
Exp -> Exp' ASSIGNOP Exp'' (39)
Exp'.iDimension = 0
Exp''.iDimension = 0
Exp.sValid = Exp'.sValid && Exp'.sValid && Exp'.sType == Exp''.sType && Exp'.sDimension && Exp''.sDimension
Exp.sType = Exp'.sType
Exp.sDimension = Exp'.sDimension

/* int j; */
/* i + 1; */
/* i - 1; */
/* i * 1; */
/* i / 1; */
Exp -> Exp' PLUS/MINUS/STAR/DIV Exp'' (43/44/45/46)
Exp'.iDimension = 0
Exp''.iDimension = 0 
Exp.sValid = Exp'.sValid && Exp''.sValid && Exp'.sType == Exp''.sType && Exp'.sDimension == 0 && Exp''.sDimension == 0
Exp.sType = Exp'.stype
Exp.sDimension = Exp'.sDimension

/* i > 1; */
Exp -> Exp' RELOP Exp'' (42)
Exp'.iDimension = 0
Exp''.iDimension = 0 
Exp.sValid = Exp'.sValid && Exp''.sValid && Exp'.sType == Exp''.sType && Exp'.sDimension == 0 && Exp''.sDimension == 0
Exp.sType = Int
Exp.sDimension = 0

/* i & 1 */
Exp -> Exp' AND/OR Exp'' (40/41)
Exp'.iDimension = 0
Exp''.iDimension = 0 
Exp.sValid = Exp'.sValid && Exp''.sValid && Exp'.sType == Int && Exp''.sType == Int && Exp'.sDimension == 0 && Exp''.sDimension == 0
Exp.sType = Int
Exp.sDimension = 0

// 检查错误类型4，函数出现重复定义
// 检查错误类型19，函数的多次声明互相冲突，或者声明与定义之间互相冲突

// 函数声明/定义部分

ExtDef -> Specifier FunDec CompSt (6)
FunDec.otherInfomation = new FuncInfo()
CompSt.otherInfomation = (Specifier.sType, Specifier.sDimension)

ExtDef -> Specifier FunDec SEMI (59)
FunDec.otherInfomation = new FuncInfo()

FunDec -> ID LP VarList RP (18)
VarList.otherInfomation = FunDec.otherInfomation
addNewFunc(ID.name, VarList.otherInfomation)

FunDec -> ID LP RP (19)
addNewFunc(ID.name, VarList.otherInfomation)

VarList -> ParamDec COMMA VarList' (20)
VarList'.otherInfomation = VarList.otherInfomation
param = new Symbol()
param.dimension = ParamDec.sDimension
addTempFuncParam(VarList.otherInfomation, param)
VarList'.otherInfomation = NULL

VarList -> ParamDec (21)
param = new Symbol()
param.dimension = ParamDec.sDimension
addTempFuncParam(VarList.otherInfomation, new Symbol())

ParamDec -> Specifier VarDec (22)
VarDec.iType = Specifier.sType
VarDec.iDimension = 0
ParamDec.sType = VarDec.sType
ParamDec.sDimension = VarDec.sDimension


// 检查错误类型2，函数调用时未定义
// 检查错误类型9，函数调用时实参与形参的数目或类型不匹配
// 检查错误类型11，对普通变量使用“(...)”或“()”(函数调用)操作符
// 检查错误类型18，函数进行了声明，但没有被定义
// 函数调用

Exp -> ID LP Args RP (50)
Args.otherInfomation = ID.otherInfomation = FuncInfo

Exp -> ID LP RP (51)

Args -> Exp COMMA Args' (57)
addTempFuncParam(Exp)
Args.otherInfomation = NULL

Args -> Exp (58)
addTempFuncParam(Exp)
Args.otherInfomation = NULL


// 检查错误类型8，return语句的返回类型与函数定义的返回类型不匹配

CompSt -> LC DefList StmtList RC (23)
StmtList->otherInfomation = CompSt.sType


StmtList -> Stmt StmtList' (24)
Stmt->otherInfomation = StmtList.sType
StmtList'->otherInfomation = StmtList.sType


Stmt -> CompSt (27)
Stmt->otherInfomation = Stmt.sType


Stmt -> IF LP Exp RP Stmt' (29)
Stmt->otherInfomation = Stmt.sType


Stmt -> IF LP Exp RP Stmt' ELSE Stmt'' (30)
Stmt->otherInfomation = StmtList.sType


Stmt -> WHILE LP Exp RP Stmt' (31)
Stmt->otherInfomation = StmtList.sType


Stmt -> RETURN Exp SEMI (28)
check Exp->sValid
check (exp->sType == Stmt->sType)


/*******************************************************/
/******************************************************/
// 处理结构体的定义

Specifier -> StructSpecifier (10)
Specifier = StructSpecifier


StructSpecifier -> STRUCT OptTag LC DefList RC (11)
stackPush()
stackPop()


StructSpecifier -> STRUCT Tag (12)
getSymbolFull(tag.name)


OptTag -> ID (13)


OptTag -> %empty (14)


Tag -> ID (15)



